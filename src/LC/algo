5.4.7, 9.4
--
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
For example,
1
/ \
2 3
The root-to-leaf path 1->2 represents the number 12. The root-to-leaf path 1->3 represents the number
13.
Return the sum = 12 + 13 = 25.
--
int rootToLeafSum(const tnPtr& root)

Unbalanced tree
left skew/right 
nullptr

1 => 1
  1
 / 	 => 12
 2
 
 leafs with 0
 overflow.. 9999999....
--
Algo

rootToLeafSum(root)

	null validation
	finalSum = 0,  
 	helper(&finalSum, 0, root)
 	return sum
 	
 helper(finalSum, curSum, root)
 	if !root return
 	
 	curSum = curSum * 10 + root value
 	
 	if root is leaf
 		add curSum to finalSum
 	else
 		helper(finalSum, curSum, left)
 		helper(..., right)
--
Run examples 	