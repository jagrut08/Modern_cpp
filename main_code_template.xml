<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="Default template for newly created C++ source files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.cppsourcefile" name="Default C++ source template">/*&#13;
 * &#13;
 * &#13;
 * */&#13;
&#13;
#include &lt;boost/range/combine.hpp&gt;&#13;
#include &lt;boost/tuple/detail/tuple_basic.hpp&gt;&#13;
&#13;
#include &lt;cassert&gt;&#13;
#include &lt;iostream&gt;&#13;
#include &lt;stdexcept&gt;&#13;
&#13;
&#13;
int main() {&#13;
	try {&#13;
		const int nullVal = -1;&#13;
		const std::vector&lt;std::vector&lt;int&gt;&gt; levelOrderTraversals {&#13;
			{5, 4, 8},&#13;
			{5, 4, 8},&#13;
			{5, 4, 8},&#13;
			{1, 2, 3, 4, -1, 5, -1},&#13;
			{1, 2, 3, 4, -1, 5, -1},&#13;
&#13;
			{1, 2, -1, 3, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1}, // left skew&#13;
			{1, -1, 2, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4}, // right skew&#13;
			{1, -1, 2, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4}, // right skew&#13;
&#13;
		};&#13;
&#13;
		const std::vector&lt;int&gt; expSums = {&#13;
				9,&#13;
				13,&#13;
				5,&#13;
				7,&#13;
				9,&#13;
				10,&#13;
				10,&#13;
				6&#13;
		};&#13;
&#13;
		const std::vector&lt;bool&gt; expRes = {&#13;
				true,&#13;
				true,&#13;
				false,&#13;
				true,&#13;
				true,&#13;
				true,&#13;
				true,&#13;
				false&#13;
		};&#13;
&#13;
		assert(levelOrderTraversals.size() == expSums.size(), "Unequal sized containers passed to boost::combine()!");&#13;
		assert(levelOrderTraversals.size() == expRes.size(), "Unequal sized containers passed to boost::combine()!");&#13;
&#13;
		for(auto tup : boost::combine(levelOrderTraversals, expSums, expRes)) {&#13;
			std::vector&lt;int&gt; levelOrderTraversal;&#13;
			int expSum = -1;&#13;
			bool expResVal = false;&#13;
			boost::tie(levelOrderTraversal, expSum, expResVal) = tup;&#13;
&#13;
			const auto root = createBT(levelOrderTraversal, nullVal);&#13;
			printBT(root);&#13;
			const bool res = pathExists(root, expSum);&#13;
		//	assert(res == expResVal);&#13;
			std::cout &lt;&lt; "Path adding up to " &lt;&lt; expSum &lt;&lt; (res? " exists.\n" : " doesn't exist.\n");&#13;
		}&#13;
	} catch(const std::exception&amp; e) {&#13;
		std::cerr &lt;&lt; "Exception in main(): " &lt;&lt; e.what() &lt;&lt; '\n';&#13;
	} catch(...) {&#13;
		return -1;&#13;
	}&#13;
}&#13;
</template></templates>